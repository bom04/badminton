{
	"nodes":[
		{"id":"c16516d98da72047","type":"text","text":"# 기본 jwt 개념","x":-330,"y":-360,"width":250,"height":60},
		{"id":"3df52b58e5a9250d","type":"text","text":"### 클라이언트\n- jwt 토큰(`access token`) 가지고 있음\n","x":100,"y":-260,"width":220,"height":120},
		{"id":"e49339e665cb4284","type":"text","text":"### 문제점\n- JWT 토큰 탈취하기가 쉬움\n\t→ 탈취할 확률을 낮추기 위해 `access token`의 유효시간을 짧게 하고 대신에 서버에서 `refresh token`을 관리해서 `access token`이 만료되었어도 `refresh token`이 유효하다면 서버에서 다시 `access token`을 재발급해주자!\n\t→ 서버에서 `refresh token`을 관리하려면 해당 토큰의 유효 시간이 지나면 토큰을 주기적으로 지워주는 기능이 필요한데 스케줄러를 따로 구현하기 어려우니까 `redis` db에 관리하자!","x":0,"y":-880,"width":250,"height":550},
		{"id":"e47ddcfe455f4252","type":"text","text":"### 서버","x":-330,"y":-208,"width":170,"height":68},
		{"id":"b112e032b494d8b4","type":"text","text":"# Redis를 사용한 jwt 단점 보완","x":-384,"y":-60,"width":384,"height":60},
		{"id":"6ec3981d3c8a9ea1","type":"text","text":"- 로그인한 후\n\t- 유저 저장은 provider에서 이뤄짐\n\t- 로그인 자체 성공 이후의 작업(JWT 토큰 관련)은  `AuthenticationSuccessHandler`에서 이뤄짐\n\t- 맨 처음으로 로그인한 사람은 해당 handler의 `onAuthenticationSuccess()`에서 `if(oAuth2User.getRole() == Role.GUEST)`에서 `response.sendRedirect(\"oauth2/sign-up\")`로 추가 회원가입 페이지로 이동하도록 설정. 그리고나서 클라이언트에게 `accessToken`을 헤더에 포함해서 보내자\n\t- 이미 회원가입 된 유저라면(`Role.USER`) 그때 `accessToken`를 클라이언트 헤더에 포함해서 보내자\n\t\t- `refresh token` 생성 후 저장\n\t\t- `access token` 생성 후 클라이언트에게 헤더로 전달\n- 로그아웃\n\t- 서버에서 `refresh token` delete\n\t- access token은?\n- request 요청시\n\t- 클라이언트가 request header에 jwt 토큰을 담아 같이 전달하고 서버에서는 받은 jwt 토큰이 유효한지 검사한 후에,\n\t\t1. `refresh token`과 비교해서 유효하면 클라이언트가 요청한 작업 진행\n\t\t2. 유효하지 않지만 `refresh token`와 비교했을때 유효하다면 클라이언트가 요청한 작업 진행 후에 마지막으로 `access token`을 재발급해서 다시 클라이언트에 보내줌\n\t\t3. 유효하지도 않고 `refresh token`과 비교해서도 유효하지 않은 값이면 바로 에러 보내기","x":-330,"y":260,"width":350,"height":480},
		{"id":"7258ac98fc0e5ffd","type":"text","text":"### jwt 토큰 인증 방식\n- [`access token` 탈취 후 문제를 방지하기 위해 짧게 유효 시간을 두고 관리하는 방식](https://velog.io/@ch4570/OAuth-2.0-JWT-Spring-Security%EB%A1%9C-%ED%9A%8C%EC%9B%90-%EA%B8%B0%EB%8A%A5-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0-Access-Token-Refresh-Token-%EC%83%9D%EC%84%B1)\n\t- 서버: `refresh token`만 관리\n\t- 클라이언트: `access token`만 관리\n- [RTR 방식(`refresh token`을 한번만 사용할 수 있게 만드는 방법)](https://ksh-coding.tistory.com/71)\n\t- 서버: `refresh token`만 관리\n\t- 클라이언트: `access token`와 `refresh token`둘 다 가지고 있음\n\t- 만약 클라이언트의 `access token`이 만료되면 요청 헤더에 `refresh token`을 보내고 그 외에는 `access token`만 헤더에 보내는 방식","x":80,"y":560,"width":250,"height":399},
		{"id":"d8fcbd5ae9f4af6c","type":"text","text":"### 궁금증\n- redis db에 access token, refresh token 두개 다 저장하는건 알겠는데, 클라이언트는 access token을 어떻게 저장하고있는거지?\n\t→ 그건 백엔드가 할 일이 아님. 프론트엔드가 처리함\n\t→ [[(해결) JWT 인증이란#결론]]","x":365,"y":540,"width":250,"height":540},
		{"id":"175853a8fdfb82cf","type":"text","text":"### jwt 토큰\n- jwt 토큰은 쉽게 탈취당할 수 있고 decoding으로 정보를 볼 수 있기 때문에 토큰에 개인정보를 담으면 안되고 오로지 식별만을 위한 정보를 담아야 함(ex.email)\n- `크롬 개발자 도구>Network` 볼때 가장 마지막으로 실행되는(내 눈으로 보이는 홈페이지 화면일수록) `waterfall`이 안보이게 멀어야 함(`waterfall` 역정렬)","x":400,"y":60,"width":250,"height":400},
		{"id":"1f9a048a288bbca0","type":"text","text":"### 클라이언트\n- `access token`을 가지고 있음(토큰 탈취 문제 때문에 `refresh token`보다 훨씬 짧은 유효시간을 지님)","x":100,"y":30,"width":250,"height":203},
		{"id":"bfe76652bc1dfe34","type":"text","text":"### 서버\n- `refresh token`을 가지고 있음","x":-495,"y":57,"width":250,"height":149}
	],
	"edges":[
		{"id":"156d4abfbd098788","fromNode":"c16516d98da72047","fromSide":"bottom","toNode":"e47ddcfe455f4252","toSide":"top"},
		{"id":"c73b5498ccb2a4e3","fromNode":"c16516d98da72047","fromSide":"bottom","toNode":"3df52b58e5a9250d","toSide":"top"},
		{"id":"e446d878843342cf","fromNode":"3df52b58e5a9250d","fromSide":"left","toNode":"e47ddcfe455f4252","toSide":"right","fromEnd":"arrow","label":"서버에서\njwt 토큰이 \n유효한지 검사"},
		{"id":"0d345b7c74bc97e1","fromNode":"c16516d98da72047","fromSide":"right","toNode":"e49339e665cb4284","toSide":"left"},
		{"id":"275ff4997a958f1e","fromNode":"b112e032b494d8b4","fromSide":"bottom","toNode":"bfe76652bc1dfe34","toSide":"top"},
		{"id":"cfca46548fd750c1","fromNode":"b112e032b494d8b4","fromSide":"bottom","toNode":"1f9a048a288bbca0","toSide":"top"},
		{"id":"886580dc7a8e7ea3","fromNode":"175853a8fdfb82cf","fromSide":"bottom","toNode":"7258ac98fc0e5ffd","toSide":"top"},
		{"id":"383ee9ef0829ad38","fromNode":"7258ac98fc0e5ffd","fromSide":"right","toNode":"d8fcbd5ae9f4af6c","toSide":"left"},
		{"id":"97e2f6ab590ef0fe","fromNode":"bfe76652bc1dfe34","fromSide":"right","toNode":"1f9a048a288bbca0","toSide":"left","fromEnd":"arrow","label":"Redis에서 refreshToken이 \n유효한지 검사 후 \naccessToken 발급"}
	]
}